Міністерство освіти та науки України
Харківський національний університет радіоелектроніки


Кафедра ПІ



Звіт
з лабораторної роботи №3
з дисципліни “Аналіз та рефакторинг коду”
Тема роботи: «РОЗРОБКА БІЗНЕС-ЛОГІКИ ТА ФУНКЦІЙ АДМІНІСТРУВАННЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ»

Виконав:                                                                                ст. гр. ПЗПІ-22-6 Гармаєв М.С.
Викладач:                                                                              Сокорчук І.П.









Харків
2024 р
3 РОЗРОБКА БІЗНЕС-ЛОГІКИ ТА ФУНКЦІЙ АДМІНІСТРУВАННЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ
3.1  Мета роботи 
На лабораторній роботі №3 потрібно розробити бізнес-логику та функції адміністрування серверної частини  програмної системи.
3.2  Хід роботи
1) Розробити бізнес логіку серверної частини програмної системи.
Бізнес логіка серверної частини охоплює всі алгоритми та процедури, що відповідають за обробку даних, отриманих із датчиків, аналіз стану доріг та генерацію критичних сповіщень. Основні завдання бізнес логіки включають:
Збір та обробка даних:
a) Дані з сенсорів (температура, вологість, ямковість, наявність льоду) автоматично записуються в таблицю SensorData.
b) Розроблено алгоритми первинного аналізу показників для виявлення аномалій. Наприклад, якщо температура нижча за певний критичний поріг (-5°C), система створює сповіщення про ризик обледеніння та надсилає його на електрону пошту адміну.
Генерація сповіщень:
a) На основі аналізу даних з SensorData створюється бізнес-логіка, яка порівнює отримані значення з заданими порогами.
b) Якщо певний показник (температура, вологість, наявність льоду чи ямковість) перевищує або нижчий за встановлений поріг, система автоматично генерує критичне сповіщення та записує його у таблицю Alerts.
Аналітика та звітування:
a) Бізнес логіка включає створення аналітичних звітів, що базуються на історичних даних SensorData та Alert.
b) Ці звіти дозволяють оцінити ефективність обслуговування доріг, прогнозувати аварійні ситуації та формувати рекомендації для ремонтних робіт.
Розмежування доступу:
a) Бізнес логіка враховує різні ролі користувачів (Admin, Operator, User) для забезпечення належного рівня доступу до функціоналу системи.
b) Наприклад, лише адміністратори та оператори можуть виконувати операції оновлення даних або змінювати статус сповіщень, тоді як звичайні користувачі мають доступ лише до перегляду даних та аналітичних звітів.
2) Розробити функції адміністрування серверної частини програмної системи
Функції адміністрування забезпечують управління та моніторинг роботи серверної частини, що включає як операції з даними, так і управління користувачами. Основні напрямки адміністрування:
Управління користувачами:
a) Реєстрація нових користувачів із хешуванням паролів для забезпечення безпеки.
b) Авторизація користувачів за допомогою JWT-токенів.
c) Зміна ролей користувачів (лише для адміністраторів), що дозволяє визначати, хто може виконувати певні дії в системі.
d) Видалення користувачів із системи, що дозволяє адміністратору контролювати список активних користувачів.
Адміністрування даних:
a) Додавання, оновлення, видалення та перегляд записів про ділянки доріг, сенсори, дані сенсорів та сповіщення.
b) Контроль за генерацією критичних сповіщень: адміністратор має змогу переглядати сповіщення, змінювати їх статус (наприклад, позначати як вирішені) або видаляти застарілі записи.
c) Налаштування порогових значень та коефіцієнтів, за якими система створює сповіщення (це може бути реалізовано через інтерфейс адміністрування або конфігураційні файли).
Моніторинг системи:
a) Логування важливих подій (автентифікація, створення/видалення даних, зміни в системі) для подальшого аналізу та оптимізації.
b) Генерація звітів про ефективність роботи системи, які містять статистику використання API, помилки, а також аналітичні дані по стану доріг.

3) Створити програмну реалізацію бізнес логіки та функцій адміністрування серверної частини
Програмна реалізація цих функцій здійснюється за допомогою розділення коду на кілька рівнів:
Контролери:
a) Приймають HTTP-запити від клієнтів.
b) Викликають відповідні методи сервісів, що містять бізнес-логіку.
c) Повертають відповіді у форматі JSON.
Сервіси:
a) Винесено основну бізнес-логіку в окремі сервіси (наприклад, RoadSectionService, SensorService, AlertService, UserService).
b) Сервіси виконують операції CRUD, аналіз даних від сенсорів, генерацію сповіщень та управління користувачами.
c) Забезпечують перевірку бізнес-правил (наприклад, перевірку порогових значень для критичних сповіщень).
Репозиторії (або пряме використання ORM):
a) Використання Entity Framework Core для роботи з базою даних.
b) Репозиторії абстрагують пряме звернення до бази даних, що полегшує тестування та зміну реалізації зберігання даних.
DTO (Data Transfer Objects):
a) Використовуються для обміну даними між клієнтом і сервером.
b) Допомагають приховувати внутрішню структуру моделей та забезпечують безпеку (як при реєстрації користувачів).
AlertService виконує генерацію критичних сповіщень на основі даних сенсорів, перевіряючи показники температури, вологості тощо, і створює записи у таблиці Alerts.
UserService обробляє реєстрацію користувачів із хешуванням паролів (за допомогою BCrypt), авторизацію через JWT-токени та зміну ролей.
RoadSectionService відповідає за операції з дорожніми ділянками: додавання, оновлення, видалення та отримання списку ділянок.
SensorService відповідає за керування сенсорами.
SensorDataService працює з показниками, які отримують сенсори. Записує дані від сенсора, отримує останні значення для конкретного сенсора та фільтрує показники за датою.
Реалізація цих функцій дозволяє забезпечити повноцінну роботу серверної частини, яка здатна ефективно взаємодіяти із клієнтськими застосунками, обробляти великі обсяги даних та забезпечувати високий рівень безпеки та надійності. Усі сервіси виконують конкретні бізнес-завдання та розвантажують контролери від зайвої логіки. Реалізація через сервіси дозволяє легко розширювати функціонал системи та підключати нові компоненти.

4) Перевірити роботу серверної частини системи.
Успішність та коректність роботи програмної системи було протестовано завдяки Swagger, а усі кроки із поясненням було записано у відео-звіт та викладено на YouTube (див. Додаток Б).
 
Рисунок 3.1 – UML діаграма діяльності для серверної частини

Рисунок 3.2 – UML діаграма взаємодії для серверної частини


Додаток А «Приклади програмного коду»
Частина коду сервісу SensorDataService, метод обробляє та перевіряє введені (оновлені) дані сенсорів та за дотриманням логіки відправляє повідомлення на електронну пошту адміністратора та записує це повідомлення до таблиці Alerts.
/// <summary>
/// Аналізує отримані дані сенсора та генерує сповіщення при досягненні критичних значень.
/// Логіка:
///  - Температура < -5°C → ризик обледеніння.
///  - Вологість > 80% і Температура < 3°C → ризик ожеледиці.
///  - Ямковість > 3 см → виявлено нерівність дороги.
///  - Лід = 1.0 → необхідність посипання.
/// </summary>
private async Task AnalyzeSensorDataAsync(SensorData sensorData)
{
    switch (sensorData.Parameter)
    {
        case "Температура":
            if (sensorData.DataValue < -5)
            {
                Notify($"[ALERT] Ризик обледеніння! Температура: {sensorData.DataValue}°C (SensorID: {sensorData.SensorID}).");
            }
            break;

        case "Вологість":
            if (sensorData.DataValue > 80)
            {
                var temperatureData = await _context.SensorData
                    .Include(sd => sd.Sensor)
                    .Where(sd => sd.Sensor.RoadSectionID == sensorData.Sensor.RoadSectionID &&
                                 sd.Sensor.SensorType == "Температура")
                    .OrderByDescending(sd => sd.Timestamp)
                    .FirstOrDefaultAsync();

                if (temperatureData != null && temperatureData.DataValue < 3)
                {
                    Notify($"[ALERT] Ризик ожеледиці! Вологість: {sensorData.DataValue}% і температура: {temperatureData.DataValue}°C (RoadSectionID: {sensorData.Sensor.RoadSectionID}).");
                }
            }
            break;

        case "Ямковість":
            if (sensorData.DataValue > 3)
            {
                Notify($"[ALERT] Виявлено нерівність дороги! Ямковість: {sensorData.DataValue} см (SensorID: {sensorData.SensorID}).");
            }
            break;

        case "Лід":
            if (sensorData.DataValue == 1.0)
            {
                Notify($"[ALERT] Наявність льоду! Необхідно посипати (SensorID: {sensorData.SensorID}).");
            }
            break;

        default:
            break;
    }

    await Task.CompletedTask;
}

private void Notify(string message)
{
    try
    {
        using (var smtpClient = new SmtpClient("smtp.gmail.com", 587))
        {
            smtpClient.EnableSsl = true;
            smtpClient.DeliveryMethod = SmtpDeliveryMethod.Network;
            smtpClient.UseDefaultCredentials = false;

            // Замініть 'your_email@gmail.com' на вашу адресу, а 'your_app_password' - на пароль додатку, який ви згенерували
            smtpClient.Credentials = new NetworkCredential("mykhailo.harmaiev@nure.ua", "dwuz zcdc zdkp yuch");

            var mailMessage = new MailMessage
            {
                From = new MailAddress("mykhailo.harmaiev@nure.ua"),
                Subject = "Критичне сповіщення",
                Body = message,
                IsBodyHtml = false
            };

            mailMessage.To.Add("sayanheck@gmail.com");

            smtpClient.Send(mailMessage);
        }
    }
    catch (Exception ex)
    {
        System.Console.WriteLine($"Помилка при відправці email: {ex.Message}");
    }
}

private async Task CheckAndSaveCriticalAlerts(int roadSectionId, string parameter, double dataValue)
{
    Alert alert = null;

    if (parameter == "Температура" && dataValue < -5)
    {
        alert = new Alert
        {
            RoadSectionID = roadSectionId,
            AlertType = "Температура",
            Message = "Температура нижче -5°C. Можливе обледеніння.",
            CreatedDate = DateTime.UtcNow, // Явно встановлюємо дату створення
            IsResolved = false
        };
    }
    else if (parameter == "Вологість" && dataValue > 80)
    {
        alert = new Alert
        {
            RoadSectionID = roadSectionId,
            AlertType = "Вологість",
            Message = "Рівень вологості перевищує 80%. Ризик ожеледиці.",
            CreatedDate = DateTime.UtcNow,
            IsResolved = false
        };
    }
    else if (parameter == "Ямковість" && dataValue > 3)
    {
        alert = new Alert
        {
            RoadSectionID = roadSectionId,
            AlertType = "Ямковість",
            Message = "Виявлено нерівність дороги (ямковість більше 3 см).",
            CreatedDate = DateTime.UtcNow,
            IsResolved = false
        };
    }
    else if (parameter == "Лід" && dataValue == 1.0)
    {
        alert = new Alert
        {
            RoadSectionID = roadSectionId,
            AlertType = "Лід",
            Message = "Виявлено лід на дорозі. Необхідне посипання.",
            CreatedDate = DateTime.UtcNow,
            IsResolved = false
        };
    }

    if (alert != null)
    {
        _context.Alerts.Add(alert);
        await _context.SaveChangesAsync();
    }
}


Додаток Б «Посилання»
Посилання на відеозапис - https://youtu.be/O9zz3fzfBUo 
Посилання на GitHub репозиторій - https://github.com/NureHarmaievMykhailo/arkpz-pzpi-22-6-harmaiev-mykhailo/tree/main/Task3 

