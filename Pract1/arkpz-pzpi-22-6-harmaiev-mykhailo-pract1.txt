Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук

Кафедра «Програмної інженерії»

ЗВІТ
з практичної роботи №1
з дисципліни «Аналіз та рефакторинг коду»
на тему: «Правила оформлення програмного коду»

Виконав:
ст. гр. ПЗПІ-22-6,
Гармаєв Михайло

Перевірив:
ст. викладач кафедри ПІ,
Сокорчук І. П.

Харків 2024





1 ПРАВИЛА ОФОРМЛЕННЯ ПРОГРАМНОГО КОДУ
1.1 Мета роботи:
Ознайомитися з основними рекомендаціями щодо написання чистого, ефективного та підтримуваного коду для мови програмування Kotlin, навчитися аналізувати та покращувати якість коду.

1.2 Хід роботи:

1) Вступ: Важливість правил оформлення коду

Стандартизація коду є основою ефективної командної роботи. Вона передбачає, що всі члени команди дотримуються однакових правил і стилю написання коду. 
Коли всі розробники використовують однаковий стиль, проєкт виглядає цілісним і структурованим. Узгодженість полегшує розуміння коду незалежно від того, хто його написав.
Це допомагає зменшити час на адаптацію до коду, написаного іншими учасниками, є зручним для навігації в проєкті завдяки однаковим підходам до структурування. А також це полегшує аналіз та виправлення помилок у коді.
Приклад:
//Поганий код
fun calc(a: Int, b: Int): Int {return a+b}

//Гарний код
fun calculateSum(firstNumber: Int, secondNumber: Int): Int {
    return firstNumber + secondNumber
}

Перевагами дотримання стилю кодування є підвищення продуктивність команди, полегшення навчання нових членів команди та їх простіша інтеграція у проект.
Рев'юери зосереджуються на логіці та функціональності, а не на виправленні форматування.
Приклад:
//Поганий код
fun prc(x:Int,y:Int):Int{x*2+y}
val numbers= listOf(1,2,3,4);for(i in numbers){println(i)}

//Гарний код
fun processValues(x: Int, y: Int): Int { // Чітка назва, правильний відступ
    return x * 2 + y
}

val numbers = listOf(1, 2, 3, 4)
for (i in numbers) { // Код розбито на логічні частини
    println(i)
}

2) Структура коду

Правильна структура коду є основою для створення зрозумілого, підтримуваного та масштабованого програмного забезпечення. 
Вона включає організацію проєкту, логічний поділ на модулі та класи, а також використання коментарів для кращої навігації.
Проєкт має бути організований таким чином, щоб файли та каталоги відповідали логічній структурі програми. 
Це допомагає швидко знайти потрібний файл, зрозуміти, до якого модуля або функціоналу він належить, і зменшує плутанину.
Приклад:
//Погана організація:
/src
    Main.kt
    Utils.kt
    Service.kt

//Правильна організація:
/src
    /ui
        MainScreen.kt
        SettingsScreen.kt
    /utils
        StringUtils.kt
        DateUtils.kt
    /services
        UserService.kt
        AuthService.kt
У цьому прикладі кожен пакет групує файли, пов’язані з конкретною частиною програми.

Модулі в Kotlin використовуються для групування функціональності, щоб підвищити розділення обов’язків. 
Наприклад:
- UI-модуль для інтерфейсу користувача
- Data-модуль для роботи з даними
- Core-модуль для спільних компонентів

Класи повинні відповідати принципу єдиної відповідальності (SRP). Це означає, що клас має виконувати одну конкретну задачу.
Приклад:
//Поганий код (Один клас виконує кілька задач)
class UserHandler {
    fun createUser() { /* створення користувача */ }
    fun deleteUser() { /* видалення користувача */ }
    fun validateUser() { /* валідація користувача */ }
    fun logActivity() { /* логування дій */ }
}

//Правильний код (Завдання розділені між класами)
class UserService {
    fun createUser() { /* створення користувача */ }
    fun deleteUser() { /* видалення користувача */ }
}

class UserValidator {
    fun validateUser() { /* валідація користувача */ }
}

class ActivityLogger {
    fun logActivity() { /* логування дій */ }
}

Коментарі відіграють важливу роль у поясненні складної логіки та полегшенні розуміння коду для інших розробників. Однак вони не повинні дублювати очевидні речі.
Основними принципами є розділення секцій коду з використанням коментарів для позначення блоків, які відповідають за певний функціонал. Також за їх допомогою
можна пояснювати складний код, щоб пояснити задум. У разі, якщо код легко читається та самодокументується використання коментарів є неправильним.
Приклад:
//Поганий код:
// Створення списку чисел
val numbers = listOf(1, 2, 3, 4, 5)

// Виведення списку на екран
numbers.forEach { println(it) }

//Правильний код:
// Створюємо список чисел для обробки в наступних функціях
val numbers = listOf(1, 2, 3, 4, 5)

// Виводимо список на екран для перевірки
numbers.forEach { println(it) }

Використання коментарів для розділення секцій:
// =====================
// Ініціалізація змінних
// =====================
val username = "User1"
val password = "securePassword"

// =====================
// Аутентифікація користувача
// =====================
if (authenticate(username, password)) {
    println("Authentication successful")
} else {
    println("Authentication failed")
}

3) Форматування коду

Відступи:
У Kotlin, як і в багатьох інших мовах програмування, стандартом є використання 4 пробілів для кожного рівня відступу.
Відступи позначають вкладеність блоків коду, що полегшує їх візуальне сприйняття.
Вирівнювання:
Елементи, що мають спільний контекст, повинні бути вирівняні.
Це включає оголошення змінних, параметри функцій, а також довгі вирази.
Довжина рядків:
Стандартна довжина рядка — 80–100 символів.
Якщо вираз перевищує цей ліміт, його потрібно переносити на наступний рядок, дотримуючись правил вирівнювання.

Приклад:
//Поганий код
val longExpression = if (condition) "A very long string that exceeds the recommended line length and is hard to read" else "Short string"

//Правильний код
val longExpression = if (condition) {
    "A very long string that exceeds the recommended line length and is hard to read"
} else {
    "Short string"
}

Табуляція чи пробіли?
Табуляція використовується в деяких командах через можливість налаштування ширини (наприклад, 2, 4 або 8 символів).
в той же час, пробіли є більш популярним підходом, оскільки забезпечують однаковий вигляд коду незалежно від середовища розробки.

//Поганий код (змішані табуляції та пробіли)
fun calculate() {    
\tval result = 42 // Табуляція замість пробілів
    println(result)
}

//Правильний код (використовуються лише пробіли)
fun calculate() {
    val result = 42
    println(result)
}

Дужки та відступи є важливими елементами для структурування коду. У світі програмування існує кілька стандартних стилів:

Стиль Allman:
Відкривальна дужка { завжди розташовується на новому рядку.
Підходить для програм, де важлива візуальна чіткість вкладеності.
Приклад використання:
if (condition)
{
    println("Condition met")
}
else
{
    println("Condition not met")
}

Стиль K&R - Відкривальна дужка { розташовується в тому ж рядку, що й оператор. Використовується в Kotlin як стандартний стиль.
Приклад використання:
if (condition) {
    println("Condition met")
} else {
    println("Condition not met")
}

4) Іменування

У мові програмування Kotlin стандартним є використання camelCase для змінних та функції, для класів PascalCase, а для констант UPPER\_SNAKE\_CASE.
Приклад:
//Поганий код
fun calc(x: Int, y: Int): Int { return x + y }
fun data(): String { return "info" }

//Правильний код
fun calculateSum(x: Int, y: Int): Int { return x + y }
fun fetchData(): String { return "info" }

Принципи вибору імен
Зрозумілість:
Ім'я має описувати, для чого використовується змінна чи функція. Необхідно уникайте абревіатур, якщо вони не є загальновідомими.

Лаконічність:
Для лаконічності коду не потрібна надмірна деталізація, яка робить імена громіздкими.
Наприклад, краще fetchData, ніж fetchDataFromRemoteServer.

Унікальність:
Ім'я має бути достатньо унікальним у своєму контексті, щоб уникнути конфліктів.

//Поганий код
fun a(b: Int): Int { return b * 2 } // Нічого не зрозуміло

//Правильний код
fun calculateDouble(value: Int): Int { return value * 2 }

Уникання «магічних» чисел
«Магічні» числа — це значення, які використовуються у коді без пояснення їхнього призначення. Вони роблять код менш зрозумілим і важким для підтримки.
Приклад:
//Поганий код
fun calculateDiscount(price: Double): Double {
    return price * 0.1 // Чому 0.1?
}

//Правильний код
const val DISCOUNT_RATE = 0.1

fun calculateDiscount(price: Double): Double {
    return price * DISCOUNT_RATE
}

5) Коментарі

Коли та де використовувати коментарі
Як вже зазначалось вище, коментарі слід використовувати для пояснення складної логіки або для опису алгоритмів чи нетривіальних рішень.
Приклад:
//Поганий код
val numberOfUsers = 10 // Оголошення змінної числа користувачів (зайве)

//Гарний код
// Використовуємо сортування \"пузирком\" через специфічні вимоги до пам'яті
fun bubbleSort(array: IntArray): IntArray {
    // Алгоритм сортування...
}

Коментарі для пояснення коду:
Ці коментарі описують, що робить конкретний фрагмент коду. Їх використовують, коли код виконує складні або нетривіальні дії.
Приклад:
// Обчислюємо середнє арифметичне списку чисел
val average = numbers.sum() / numbers.size

Коментар пояснює чому код написаний саме так, надаючи контекст рішення.
// Перевіряємо, чи користувач має доступ до адміністративної панелі
// Логіка обмежена до рівня доступу "admin" через політику компанії
if (user.accessLevel == "admin") {
    showAdminPanel()
}

Надмірні коментарі захаращують код і можуть ускладнити його читання. Необхідно використовувати зрозумілі імена змінних, функцій і класів, щоб коментарі не були потрібними.
Коментарі повинні пояснювати, що не можна зрозуміти без додаткових пояснень.
Приклад:
//Поганий приклад
val users = listOf("Alice", "Bob", "Charlie") // Список користувачів
users.forEach { println(it) } // Виведення кожного користувача

//Правильний код
// Виводимо список користувачів для тестування інтерфейсу
val testUsers = listOf("Alice", "Bob", "Charlie")
testUsers.forEach { println(it) }

6) Документування коду

У Kotlin документування зазвичай виконується за допомогою спеціалізованих коментарів формату KDoc (аналогічно до Javadoc)
Що таке KDoc?
Це вбудований формат документації, підтримуваний Kotlin. Використовується для створення документації класів, методів, функцій, модулів тощо.
Коментарі KDoc автоматично обробляються середовищами розробки (наприклад, IntelliJ IDEA) і можуть бути згенеровані у вигляді HTML-документації.
Приклад:
/**
 * Розраховує суму двох чисел.
 * 
 * @param a Перше число
 * @param b Друге число
 * @return Сума чисел
 */
fun calculateSum(a: Int, b: Int): Int {
    return a + b
}

Формат та структура коментарів для документації
Коментар до функції має містити:
- Короткий опис функціональності.
- Теги для опису параметрів (@param).
- Тег для значення, яке повертає функція (@return).
Приклад:
/**
 * Повертає відсортований список чисел.
 *
 * @param numbers Список чисел, які потрібно відсортувати
 * @return Відсортований список чисел
 */
fun sortNumbers(numbers: List<Int>): List<Int> {
    return numbers.sorted()
}

Включення прикладів коду в документацію допомагає розробникам зрозуміти, як використовувати функції чи класи.
Приклад:
/**
 * Повертає повідомлення вітання для користувача.
 *
 * @param name Ім'я користувача
 * @return Повідомлення вітання
 *
 * Приклад:
 * ```
 * val message = greetUser("Alice")
 * println(message) // Hello, Alice!
 * ```
 */
fun greetUser(name: String): String {
    return "Hello, $name!"
}

7) Конвенції стилю кодування

Конвенції стилю кодування відрізняються залежно від мови програмування, оскільки кожна має свої особливості, стандарти та поширені підходи до форматування. 
Дотримання цих стандартів дозволяє створювати код, який відповідає загальноприйнятим практикам і є легким для розуміння іншими розробниками.

Java використовує рекомендації, описані в Oracle's Java Code Conventions. 
Основні моменти:
- Відступи: 4 пробіли.
- Довжина рядка: до 80 символів (рідше — 100).
- Іменування: класи — PascalCase, методи та змінні — camelCase, константи — UPPER_SNAKE_CASE.
- Розташування дужок: стиль K&R.
Приклад:
public class UserDetails {
    private String name;
    private int age;

    public UserDetails(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public String getUserInfo() {
        return name + ", " + age + " years old";
    }
}

JavaScript має різні стилі кодування, залежно від середовища розробки (Node.js, фронтенд). Поширені стандарти включають Airbnb JavaScript Style Guide. 
Основні принципи:
- Відступи: 2 пробіли.
- Дужки: стиль K&R.
- Іменування: camelCase для змінних і функцій, PascalCase для класів.
- Довжина рядка: не більше 100 символів.
Приклад:
class UserDetails {
    constructor(name, age) {
        this.name = name;
        this.age = age;
    }

    getUserInfo() {
        return `${this.name}, ${this.age} years old`;
    }
}

8) Кодування на основі тестування

Test-Driven Development (TDD) — це підхід до розробки програмного забезпечення, при якому спочатку пишуться тести, а вже потім створюється функціональний код. 
Такий методологічний підхід дозволяє зосередитись на якості коду, забезпечує передбачувану поведінку функціональності та знижує ризик виникнення помилок.

Основи TDD та організація коду з урахуванням тестів
Етапи TDD:
- Створюється тестовий випадок для нової функціональності, яка ще не реалізована.
- Тест має описувати очікувану поведінку.
- Пишеться код, достатній для проходження тесту. Код може бути простим і навіть не оптимальним.
- Оптимізація коду без зміни його поведінки, щоб покращити структуру та підтримуваність.
- Для нової функціональності процес повторюється.

Організація коду:
- Кожна функція або клас має бути тестованим.
- Код має бути розділений на невеликі частини (функції, методи), кожна з яких виконує лише одну задачу.
- Логіка повинна бути відокремлена від деталей реалізації (наприклад, UI-компонентів або доступу до бази даних).

9) Інструменти та автоматизація

Підтримка високої якості коду вимагає використання сучасних інструментів і практик автоматизації. 
Вони допомагають виявляти помилки, забезпечувати дотримання стилю коду та підвищувати ефективність розробки.

Використання статичного аналізу коду
Статичний аналіз коду дозволяє виявляти проблеми в коді без його виконання. Це допомагає виявити помилки, порушення стилю, вразливості безпеки та покращити читабельність.
Популярні інструменти:

1. SonarQube аналізує код на наявність багів, вразливостей та кодових запахів. Підтримує понад 25 мов програмування, включаючи Java, Python, Kotlin, C++.
Інтегрується з CI/CD-пайплайнами для автоматичного аналізу.
Приклад використання:
sonar-scanner -Dsonar.projectKey=my_project -Dsonar.sources=./src

2. Codacy - хмарний сервіс для статичного аналізу. Виявляє порушення стилю, помилки та потенційні вразливості.
Інтегрується з репозиторіями GitHub, GitLab, Bitbucket. Підтримує понад 40 мов програмування та вміє роботи детальні звіти з рекомендаціями щодо виправлення.

1.3 Висновок
Оформлення коду — це не лише формальність, а важлива складова створення якісного, зрозумілого та підтримуваного програмного забезпечення. Дотримання стандартів стилю кодування сприяє полегшенню читання та розуміння коду як для самого розробника, так і для всієї команди. Використання узгоджених правил структурування проєкту та форматування окремих блоків коду забезпечує логічність і передбачуваність, що значно знижує ймовірність помилок. Коментарі та документація, коли вони використовуються доречно, додають контексту і пояснюють складну логіку, залишаючи код доступним навіть через тривалий час після написання.
Кодування на основі тестування (TDD) дозволяє забезпечити надійність функціональності ще до її реалізації. Чіткі та ізольовані тести допомагають не лише виявляти помилки, але й роблять процес рефакторингу безпечним. Інструменти автоматизації, такі як SonarQube або ESLint, у поєднанні з CI/CD-пайплайнами, допомагають інтегрувати перевірку стилю та якості коду у щоденну розробку, економлячи час і зусилля команди.
Ефективне навчання правилам оформлення коду потребує вивчення конвенцій стилю, практики рефакторингу, а також використання сучасних інструментів для аналізу та форматування. Участь у код-рев’ю, робота з відкритими проєктами та застосування правил на практиці допомагають закріпити знання та сприяють професійному розвитку. Зрештою, дотримання правил оформлення коду — це шлях до створення програмного забезпечення, яке є надійним, зрозумілим та ефективним.

1.4 Список використаних джерел
Офіційна документація Kotlin: https://kotlinlang.org/docs/home.html
Clean Code: A Handbook of Agile Software Craftsmanship / Robert C. Martin. — Prentice Hall, 2008.
Effective Java / Joshua Bloch. — Addison-Wesley, 2017.
Google Java Style Guide: https://google.github.io/styleguide/javaguide.html
PEP 8 — Style Guide for Python Code: https://peps.python.org/pep-0008/


