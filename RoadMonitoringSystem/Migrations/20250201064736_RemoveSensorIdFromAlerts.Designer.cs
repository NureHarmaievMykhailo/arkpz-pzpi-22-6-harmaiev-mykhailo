// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RoadMonitoringSystem.Data;

#nullable disable

namespace RoadMonitoringSystem.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250201064736_RemoveSensorIdFromAlerts")]
    partial class RemoveSensorIdFromAlerts
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RoadMonitoringSystem.Models.Alert", b =>
                {
                    b.Property<int>("AlertID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AlertID"));

                    b.Property<string>("AlertType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RoadSectionID")
                        .HasColumnType("int");

                    b.Property<int?>("SensorID")
                        .HasColumnType("int");

                    b.HasKey("AlertID");

                    b.HasIndex("RoadSectionID");

                    b.HasIndex("SensorID");

                    b.ToTable("Alerts");
                });

            modelBuilder.Entity("RoadMonitoringSystem.Models.RoadSection", b =>
                {
                    b.Property<int>("RoadSectionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoadSectionID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RoadSectionID");

                    b.ToTable("RoadSections");
                });

            modelBuilder.Entity("RoadMonitoringSystem.Models.Sensor", b =>
                {
                    b.Property<int>("SensorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SensorID"));

                    b.Property<DateTime>("InstallationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoadSectionID")
                        .HasColumnType("int");

                    b.Property<string>("SensorType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SensorID");

                    b.HasIndex("RoadSectionID");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("RoadMonitoringSystem.Models.SensorData", b =>
                {
                    b.Property<int>("SensorDataID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SensorDataID"));

                    b.Property<double>("DataValue")
                        .HasColumnType("float");

                    b.Property<string>("Parameter")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SensorID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("SensorDataID");

                    b.HasIndex("SensorID");

                    b.ToTable("SensorData");
                });

            modelBuilder.Entity("RoadMonitoringSystem.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserID");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RoadMonitoringSystem.Models.Alert", b =>
                {
                    b.HasOne("RoadMonitoringSystem.Models.RoadSection", "RoadSection")
                        .WithMany("Alerts")
                        .HasForeignKey("RoadSectionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoadMonitoringSystem.Models.Sensor", null)
                        .WithMany("Alerts")
                        .HasForeignKey("SensorID");

                    b.Navigation("RoadSection");
                });

            modelBuilder.Entity("RoadMonitoringSystem.Models.Sensor", b =>
                {
                    b.HasOne("RoadMonitoringSystem.Models.RoadSection", "RoadSection")
                        .WithMany("Sensors")
                        .HasForeignKey("RoadSectionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoadSection");
                });

            modelBuilder.Entity("RoadMonitoringSystem.Models.SensorData", b =>
                {
                    b.HasOne("RoadMonitoringSystem.Models.Sensor", "Sensor")
                        .WithMany("SensorData")
                        .HasForeignKey("SensorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("RoadMonitoringSystem.Models.RoadSection", b =>
                {
                    b.Navigation("Alerts");

                    b.Navigation("Sensors");
                });

            modelBuilder.Entity("RoadMonitoringSystem.Models.Sensor", b =>
                {
                    b.Navigation("Alerts");

                    b.Navigation("SensorData");
                });
#pragma warning restore 612, 618
        }
    }
}
